{"version":3,"sources":["webpack:///./src/utils/seo.js","webpack:///./src/templates/post-template.js","webpack:///./src/templates/projects-post.js"],"names":["SEO","description","lang","meta","img","image","title","pathname","site","metaDescription","siteMetadata","src","siteUrl","canonical","htmlAttributes","titleTemplate","link","rel","href","name","content","keywords","join","property","author","concat","width","height","defaultProps","excerpt","html","subTitle","className","fluid","dangerouslySetInnerHTML","__html","SubTitle","tags","map","tag","key","pill","variant","post","data","markdownRemark","frontmatter","query"],"mappings":"6IAOMA,EAAM,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,YAAaC,EAA8C,EAA9CA,KAAMC,EAAwC,EAAxCA,KAAaC,EAA2B,EAAlCC,MAAYC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACjDC,EADgE,OAChEA,KAEFC,EAAkBR,GAAeO,EAAKE,aAAaT,YACnDI,EAAQD,GAAOA,EAAIO,IAAX,GAAoBH,EAAKE,aAAaE,QAAUR,EAAIO,IAAQ,KAEpEE,EAAYN,EAAQ,GAAMC,EAAKE,aAAaE,QAAUL,EAAa,KAEzE,OACE,kBAAC,IAAD,CACEO,eAAgB,CAAEZ,QAClBI,MAAOA,EACPS,cAAa,QAAUP,EAAKE,aAAaJ,MACzCU,KAAMH,EAAY,CAAC,CAAEI,IAAI,YAAcC,KAAML,IAAe,GAC5DV,KAAM,CACJ,CAAEgB,KAAK,cAAgBC,QAASX,GAChC,CAAEU,KAAK,WAAaC,QAASZ,EAAKE,aAAaW,SAASC,KAA3B,MAC7B,CAAEC,SAAS,WAAaH,QAASd,GACjC,CAAEiB,SAAS,iBAAmBH,QAASX,GACvC,CAAEc,SAAS,UAAYH,QAAQ,WAC/B,CAAED,KAAK,kBAAoBC,QAASZ,EAAKE,aAAac,QACtD,CAAEL,KAAK,gBAAkBC,QAAQ,SACjC,CAAED,KAAK,sBAAwBC,QAASX,IAEvCgB,OACCrB,EACI,CACE,CAAEmB,SAAU,WAAYH,QAASf,GACjC,CAAEkB,SAAU,iBAAkBH,QAAShB,EAAIsB,OAC3C,CAAEH,SAAU,kBAAmBH,QAAShB,EAAIuB,QAC5C,CAAER,KAAM,eAAgBC,QAAS,wBAEnC,CAAC,CAAED,KAAM,eAAgBC,QAAS,aAEvCK,OAAOtB,MAKDH,MAefA,EAAI4B,aAAe,CACjB1B,KAAK,KACLC,KAAM,GACNF,YAAY,K,kCChEd,6DAMe,oBAAGK,EAAH,EAAGA,MAAOuB,EAAV,EAAUA,QAASC,EAAnB,EAAmBA,KAAMC,EAAzB,EAAyBA,SAAzB,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKzB,MAAOA,EAAOL,YAAa4B,IAChC,kBAAC,IAAD,CAAWG,UAAU,cAAcC,OAAK,GACtC,kBAAC,IAAD,CAAW3B,MAAOA,IACjByB,EACD,kBAAC,IAAD,CAAWC,UAAU,gBACnB,yBAAKE,wBAAyB,CAAEC,OAAQL,U,yUCbhD,8FAKMM,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACf,yBAAKL,UAAU,QACZK,EAAKC,KAAI,SAAAC,GAAG,OACX,kBAAC,IAAD,CAAOC,IAAKD,EAAKE,MAAI,EAACC,QAAQ,OAAOV,UAAU,aAC7C,wBAAIA,UAAU,mBAAmBO,SAM1B,sBAAe,IACtBI,EADqB,EAAXC,KACEC,eAClB,OACE,kBAAC,IAAD,CACEvC,MAAOqC,EAAKG,YAAYxC,MACxByB,SAAU,kBAACK,EAAD,CAAUC,KAAMM,EAAKG,YAAYT,OAC3CR,QAASc,EAAKd,QACdC,KAAMa,EAAKb,QAKV,IAAMiB,EAAK","file":"component---src-templates-projects-post-js-67d27404d93d715ff9a1.js","sourcesContent":["/** https://www.gatsbyjs.org/docs/add-seo-component/ */\r\n\r\nimport React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Helmet } from \"react-helmet\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst SEO = ({ description, lang, meta, image: img, title, pathname }) => {\r\n  const { site } = useStaticQuery(query)\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const image = img && img.src ? `${site.siteMetadata.siteUrl}${img.src}` : null\r\n\r\n  const canonical = pathname ? `${site.siteMetadata.siteUrl}${pathname}` : null\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{ lang }}\r\n      title={title}\r\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\r\n      link={canonical ? [{ rel: `canonical`, href: canonical }] : []}\r\n      meta={[\r\n        { name: `description`, content: metaDescription },\r\n        { name: `keywords`, content: site.siteMetadata.keywords.join(`,`) },\r\n        { property: `og:title`, content: title },\r\n        { property: `og:description`, content: metaDescription },\r\n        { property: `og:type`, content: `website` },\r\n        { name: `twitter:creator`, content: site.siteMetadata.author },\r\n        { name: `twitter:title`, content: `title` },\r\n        { name: `twitter:description`, content: metaDescription },\r\n      ]\r\n        .concat(\r\n          img\r\n            ? [\r\n                { property: \"og:image\", content: image },\r\n                { property: \"og:image:width\", content: img.width },\r\n                { property: \"og:image:height\", content: img.height },\r\n                { name: \"twitter:card\", content: \"summary_large_image\" },\r\n              ]\r\n            : [{ name: \"twitter:card\", content: \"summary\" }]\r\n        )\r\n        .concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nexport default SEO\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n  image: PropTypes.shape({\r\n    src: PropTypes.string.isRequired,\r\n    height: PropTypes.number.isRequired,\r\n    width: PropTypes.number.isRequired,\r\n  }),\r\n  pathname: PropTypes.string,\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nconst query = graphql`\r\n  query SEO {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        description\r\n        author\r\n        keywords\r\n        siteUrl\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport Container from \"react-bootstrap/Container\"\r\nimport { PageLayout, PageTitle } from \"../components\"\r\n\r\nimport SEO from \"../utils/seo\"\r\n\r\nexport default ({ title, excerpt, html, subTitle }) => (\r\n  <PageLayout>\r\n    <SEO title={title} description={excerpt} />\r\n    <Container className=\"text-center\" fluid>\r\n      <PageTitle title={title} />\r\n      {subTitle}\r\n      <Container className=\"text-justify\">\r\n        <div dangerouslySetInnerHTML={{ __html: html }} />\r\n      </Container>\r\n    </Container>\r\n  </PageLayout>\r\n)\r\n","import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport PostTemplate from \"./post-template\"\r\nimport Badge from \"react-bootstrap/Badge\"\r\n\r\nconst SubTitle = ({ tags }) => (\r\n  <div className=\"mb-5\">\r\n    {tags.map(tag => (\r\n      <Badge key={tag} pill variant=\"dark\" className=\"px-3 mr-1\">\r\n        <h5 className=\"text-white my-0\">{tag}</h5>\r\n      </Badge>\r\n    ))}\r\n  </div>\r\n)\r\n\r\nexport default ({ data }) => {\r\n  const post = data.markdownRemark\r\n  return (\r\n    <PostTemplate\r\n      title={post.frontmatter.title}\r\n      subTitle={<SubTitle tags={post.frontmatter.tags} />}\r\n      excerpt={post.excerpt}\r\n      html={post.html}\r\n    />\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query($slug: String!) {\r\n    markdownRemark(fields: { slug: { eq: $slug } }) {\r\n      html\r\n      frontmatter {\r\n        title\r\n        tags\r\n      }\r\n      excerpt\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}