{"version":3,"sources":["webpack:///./src/utils/helpers.js","webpack:///./src/utils/seo.js","webpack:///./src/pages/resume.js"],"names":["getImageMap","images","regex","hasMultipleImages","limit","reduce","map","image","slug","node","relativePath","match","hasOwnProperty","length","push","childImageSharp","fluid","arr","SEO","description","lang","meta","img","title","pathname","site","metaDescription","siteMetadata","src","siteUrl","canonical","htmlAttributes","titleTemplate","link","rel","href","name","content","keywords","join","property","author","concat","width","height","defaultProps","data","history","allMarkdownRemark","edges","allFile","imageMap","Utils","target","download","style","fontSize","icon","className","key","id","frontmatter","fields","html","query"],"mappings":"oOAAe,G,UAAA,CACbA,YAAa,SAACC,EAAQC,EAAOC,EAA2BC,GACtD,YADoE,IAAzCD,OAAoB,QAAqB,IAAdC,MAAQ,GACvDH,EAAOI,QAAO,SAACC,EAAKC,GACzB,IAAMC,EAAOD,EAAME,KAAKC,aAAaC,MAAMT,GAAO,GAClD,GAAIC,EACF,GAAIG,EAAIM,eAAeJ,GACjBF,EAAIE,GAAMK,QAAUT,GACtBE,EAAIE,GAAMM,KAAKP,EAAME,KAAKM,gBAAgBC,WACvC,CACL,IAAMC,EAAM,GACZA,EAAIH,KAAKP,EAAME,KAAKM,gBAAgBC,OACpCV,EAAIE,GAAQS,OAGdX,EAAIE,GAAQD,EAAME,KAAKM,gBAAgBC,MAEzC,OAAOV,IACN,Q,mFCVDY,EAAM,SAAC,GAA8D,IAA5DC,EAA2D,EAA3DA,YAAaC,EAA8C,EAA9CA,KAAMC,EAAwC,EAAxCA,KAAaC,EAA2B,EAAlCf,MAAYgB,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACjDC,EADgE,OAChEA,KAEFC,EAAkBP,GAAeM,EAAKE,aAAaR,YACnDZ,EAAQe,GAAOA,EAAIM,IAAX,GAAoBH,EAAKE,aAAaE,QAAUP,EAAIM,IAAQ,KAEpEE,EAAYN,EAAQ,GAAMC,EAAKE,aAAaE,QAAUL,EAAa,KAEzE,OACE,kBAAC,IAAD,CACEO,eAAgB,CAAEX,QAClBG,MAAOA,EACPS,cAAa,QAAUP,EAAKE,aAAaJ,MACzCU,KAAMH,EAAY,CAAC,CAAEI,IAAI,YAAcC,KAAML,IAAe,GAC5DT,KAAM,CACJ,CAAEe,KAAK,cAAgBC,QAASX,GAChC,CAAEU,KAAK,WAAaC,QAASZ,EAAKE,aAAaW,SAASC,KAA3B,MAC7B,CAAEC,SAAS,WAAaH,QAASd,GACjC,CAAEiB,SAAS,iBAAmBH,QAASX,GACvC,CAAEc,SAAS,UAAYH,QAAQ,WAC/B,CAAED,KAAK,kBAAoBC,QAASZ,EAAKE,aAAac,QACtD,CAAEL,KAAK,gBAAkBC,QAAQ,SACjC,CAAED,KAAK,sBAAwBC,QAASX,IAEvCgB,OACCpB,EACI,CACE,CAAEkB,SAAU,WAAYH,QAAS9B,GACjC,CAAEiC,SAAU,iBAAkBH,QAASf,EAAIqB,OAC3C,CAAEH,SAAU,kBAAmBH,QAASf,EAAIsB,QAC5C,CAAER,KAAM,eAAgBC,QAAS,wBAEnC,CAAC,CAAED,KAAM,eAAgBC,QAAS,aAEvCK,OAAOrB,MAKDH,MAefA,EAAI2B,aAAe,CACjBzB,KAAK,KACLC,KAAM,GACNF,YAAY,K,kCChEd,sHAOe,sBAAe,IAAZ2B,EAAW,EAAXA,KACVC,EAAUD,EAAKE,kBAAkBC,OAAS,GAC1ChD,EAAS6C,EAAKI,QAAQD,OAAS,GAC/BE,EAAWC,IAAMpD,YAAYC,EAAQ,kBAC3C,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKsB,MAAM,WACX,kBAAC,IAAD,CAAWA,MAAM,UAAjB,IAEE,uBAAGY,KAAK,uCAAuCkB,OAAO,SAASC,UAAQ,GACrE,kBAAC,IAAD,CACEC,MAAO,CAAEC,SAAU,QACnBC,KAAM,CAAC,MAAO,iBACdC,UAAU,iBAIhB,kBAAC,IAAD,CAAWA,UAAU,YAAY1C,OAAK,GACnC+B,EAAQzC,KAAI,gBAAGG,EAAH,EAAGA,KAAH,OACX,yBAAKkD,IAAKlD,EAAKmD,IACb,kBAAC,IAAD,CACEC,YAAapD,EAAKoD,YAClBtD,MAAO4C,EAAS1C,EAAKqD,OAAOtD,MAC5BuD,KAAMtD,EAAKsD,OAEb,wBAAIL,UAAU,gBAQnB,IAAMM,EAAK,c","file":"component---src-pages-resume-js-d2a92b9cae3f757a1580.js","sourcesContent":["export default {\r\n  getImageMap: (images, regex, hasMultipleImages = false, limit = 3) => {\r\n    return images.reduce((map, image) => {\r\n      const slug = image.node.relativePath.match(regex)[0]\r\n      if (hasMultipleImages) {\r\n        if (map.hasOwnProperty(slug)) {\r\n          if (map[slug].length <= limit)\r\n            map[slug].push(image.node.childImageSharp.fluid)\r\n        } else {\r\n          const arr = []\r\n          arr.push(image.node.childImageSharp.fluid)\r\n          map[slug] = arr\r\n        }\r\n      } else {\r\n        map[slug] = image.node.childImageSharp.fluid\r\n      }\r\n      return map\r\n    }, {})\r\n  },\r\n}\r\n","/** https://www.gatsbyjs.org/docs/add-seo-component/ */\r\n\r\nimport React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\nimport { Helmet } from \"react-helmet\"\r\nimport { useStaticQuery, graphql } from \"gatsby\"\r\n\r\nconst SEO = ({ description, lang, meta, image: img, title, pathname }) => {\r\n  const { site } = useStaticQuery(query)\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const image = img && img.src ? `${site.siteMetadata.siteUrl}${img.src}` : null\r\n\r\n  const canonical = pathname ? `${site.siteMetadata.siteUrl}${pathname}` : null\r\n\r\n  return (\r\n    <Helmet\r\n      htmlAttributes={{ lang }}\r\n      title={title}\r\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\r\n      link={canonical ? [{ rel: `canonical`, href: canonical }] : []}\r\n      meta={[\r\n        { name: `description`, content: metaDescription },\r\n        { name: `keywords`, content: site.siteMetadata.keywords.join(`,`) },\r\n        { property: `og:title`, content: title },\r\n        { property: `og:description`, content: metaDescription },\r\n        { property: `og:type`, content: `website` },\r\n        { name: `twitter:creator`, content: site.siteMetadata.author },\r\n        { name: `twitter:title`, content: `title` },\r\n        { name: `twitter:description`, content: metaDescription },\r\n      ]\r\n        .concat(\r\n          img\r\n            ? [\r\n                { property: \"og:image\", content: image },\r\n                { property: \"og:image:width\", content: img.width },\r\n                { property: \"og:image:height\", content: img.height },\r\n                { name: \"twitter:card\", content: \"summary_large_image\" },\r\n              ]\r\n            : [{ name: \"twitter:card\", content: \"summary\" }]\r\n        )\r\n        .concat(meta)}\r\n    />\r\n  )\r\n}\r\n\r\nexport default SEO\r\n\r\nSEO.propTypes = {\r\n  description: PropTypes.string,\r\n  lang: PropTypes.string,\r\n  meta: PropTypes.arrayOf(PropTypes.object),\r\n  title: PropTypes.string.isRequired,\r\n  image: PropTypes.shape({\r\n    src: PropTypes.string.isRequired,\r\n    height: PropTypes.number.isRequired,\r\n    width: PropTypes.number.isRequired,\r\n  }),\r\n  pathname: PropTypes.string,\r\n}\r\n\r\nSEO.defaultProps = {\r\n  lang: `en`,\r\n  meta: [],\r\n  description: ``,\r\n}\r\n\r\nconst query = graphql`\r\n  query SEO {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        description\r\n        author\r\n        keywords\r\n        siteUrl\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React from \"react\"\r\nimport { graphql } from \"gatsby\"\r\nimport { PageLayout, PageTitle, WorkHistory } from \"../components\"\r\nimport { SEO, Utils } from \"../utils\"\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport Container from \"react-bootstrap/Container\"\r\n\r\nexport default ({ data }) => {\r\n  const history = data.allMarkdownRemark.edges || []\r\n  const images = data.allFile.edges || []\r\n  const imageMap = Utils.getImageMap(images, /\\/[work].*\\/|$/)\r\n  return (\r\n    <PageLayout>\r\n      <SEO title=\"Resume\" />\r\n      <PageTitle title=\"Resume\">\r\n        &nbsp;\r\n        <a href=\"../../static/mydata/Kulkarni_CV.pdf \" target=\"_blank\" download>\r\n          <FontAwesomeIcon\r\n            style={{ fontSize: \"2rem\" }}\r\n            icon={[\"fas\", \"file-download\"]}\r\n            className=\"icons file\"\r\n          />\r\n        </a>\r\n      </PageTitle>\r\n      <Container className=\"mt-5 pt-3\" fluid>\r\n        {history.map(({ node }) => (\r\n          <div key={node.id}>\r\n            <WorkHistory\r\n              frontmatter={node.frontmatter}\r\n              image={imageMap[node.fields.slug]}\r\n              html={node.html}\r\n            />\r\n            <hr className=\"w-75\" />\r\n          </div>\r\n        ))}\r\n      </Container>\r\n    </PageLayout>\r\n  )\r\n}\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allMarkdownRemark(\r\n      filter: { fileAbsolutePath: { regex: \"/work/\" } }\r\n      sort: { fields: [frontmatter___startDate], order: DESC }\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          html\r\n          frontmatter {\r\n            company\r\n            location\r\n            position\r\n            tags\r\n            startDate(formatString: \"MMMM\")\r\n            endDate(formatString: \"MMMM, YYYY\")\r\n          }\r\n          fields {\r\n            slug\r\n          }\r\n        }\r\n      }\r\n    }\r\n    allFile(\r\n      filter: {\r\n        extension: { eq: \"png\" }\r\n        relativePath: { regex: \"/company/\" }\r\n        relativeDirectory: { regex: \"/content/work/\" }\r\n      }\r\n    ) {\r\n      edges {\r\n        node {\r\n          childImageSharp {\r\n            fluid(maxWidth: 400) {\r\n              ...GatsbyImageSharpFluid\r\n            }\r\n          }\r\n          relativePath\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}